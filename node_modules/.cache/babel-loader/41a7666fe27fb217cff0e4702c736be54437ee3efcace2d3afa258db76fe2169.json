{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Downloads\\\\Chatbot\\\\Chatbot\\\\client\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    type: \"bot\",\n    text: \"Hello! I'll help you create your professional resume. What is your full name?\",\n    timestamp: new Date().toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    })\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(\"name\");\n  const [isComplete, setIsComplete] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [userData, setUserData] = useState({\n    personalInfo: {},\n    contact: {},\n    professionalSummary: \"\",\n    skills: [],\n    workExperience: [],\n    education: [],\n    certifications: [],\n    languages: [],\n    projects: [],\n    awards: []\n  });\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const navigate = useNavigate();\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Focus input field when component mounts and after typing finishes\n  useEffect(() => {\n    if (!isTyping && !isComplete) {\n      var _inputRef$current;\n      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n    }\n  }, [isTyping, isComplete]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const simulateTyping = async response => {\n    setIsTyping(true);\n    // Simulate typing delay based on message length\n    await new Promise(resolve => setTimeout(resolve, Math.min(1000, response.length * 20)));\n    setIsTyping(false);\n    return response;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const timestamp = new Date().toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n\n    // Add user message\n    setMessages(prev => [...prev, {\n      type: \"user\",\n      text: input,\n      timestamp\n    }]);\n    setInput(\"\");\n    try {\n      // Check if user wants to skip\n      if (input.toLowerCase().trim() === \"skip\") {\n        // Store empty data for the current step\n        const newUserData = {\n          ...userData\n        };\n        switch (currentStep) {\n          case \"name\":\n            newUserData.personalInfo.fullName = \"\";\n            setCurrentStep(\"title\");\n            break;\n          case \"title\":\n            newUserData.personalInfo.title = \"\";\n            setCurrentStep(\"email\");\n            break;\n          case \"email\":\n            newUserData.contact.email = \"\";\n            setCurrentStep(\"phone\");\n            break;\n          case \"phone\":\n            newUserData.contact.phone = \"\";\n            setCurrentStep(\"location\");\n            break;\n          case \"location\":\n            newUserData.contact.location = \"\";\n            setCurrentStep(\"linkedin\");\n            break;\n          case \"linkedin\":\n            newUserData.contact.linkedin = \"\";\n            setCurrentStep(\"summary\");\n            break;\n          case \"summary\":\n            newUserData.professionalSummary = \"\";\n            setCurrentStep(\"skills\");\n            break;\n          case \"skills\":\n            newUserData.skills = [];\n            setCurrentStep(\"experience\");\n            break;\n          case \"experience\":\n            newUserData.workExperience = [];\n            setCurrentStep(\"education\");\n            break;\n          case \"education\":\n            newUserData.education = [];\n            setCurrentStep(\"certifications\");\n            break;\n          case \"certifications\":\n            newUserData.certifications = [];\n            setCurrentStep(\"languages\");\n            break;\n          case \"languages\":\n            newUserData.languages = [];\n            setCurrentStep(\"projects\");\n            break;\n          case \"projects\":\n            newUserData.projects = [];\n            setCurrentStep(\"awards\");\n            break;\n          case \"awards\":\n            newUserData.awards = [];\n            setIsComplete(true);\n            break;\n          default:\n            console.log(\"Unknown step:\", currentStep);\n            break;\n        }\n        setUserData(newUserData);\n\n        // Get next question from server\n        const response = await fetch(\"http://localhost:3001/api/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: \"\",\n            step: currentStep\n          })\n        });\n        const data = await response.json();\n        const botResponse = await simulateTyping(data.nextQuestion);\n        setMessages(prev => [...prev, {\n          type: \"bot\",\n          text: botResponse,\n          timestamp: new Date().toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\"\n          })\n        }]);\n        if (data.isComplete) {\n          setIsComplete(true);\n          navigate(\"/select-template\", {\n            state: {\n              resumeData: newUserData\n            }\n          });\n        }\n        return;\n      }\n      const response = await fetch(\"http://localhost:3001/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input,\n          step: currentStep\n        })\n      });\n      const data = await response.json();\n      if (data.error) {\n        const errorMessage = await simulateTyping(\"Sorry, something went wrong. Please try again.\");\n        setMessages(prev => [...prev, {\n          type: \"bot\",\n          text: errorMessage,\n          timestamp: new Date().toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\"\n          })\n        }]);\n        return;\n      }\n\n      // Store user data\n      const newUserData = {\n        ...userData\n      };\n      switch (currentStep) {\n        case \"name\":\n          newUserData.personalInfo.fullName = input;\n          setCurrentStep(\"title\");\n          break;\n        case \"title\":\n          newUserData.personalInfo.title = input;\n          setCurrentStep(\"email\");\n          break;\n        case \"email\":\n          newUserData.contact.email = input;\n          setCurrentStep(\"phone\");\n          break;\n        case \"phone\":\n          newUserData.contact.phone = input;\n          setCurrentStep(\"location\");\n          break;\n        case \"location\":\n          newUserData.contact.location = input;\n          setCurrentStep(\"linkedin\");\n          break;\n        case \"linkedin\":\n          if (input.trim()) {\n            newUserData.contact.linkedin = input;\n          }\n          setCurrentStep(\"summary\");\n          break;\n        case \"summary\":\n          newUserData.professionalSummary = input;\n          setCurrentStep(\"skills\");\n          break;\n        case \"skills\":\n          newUserData.skills = input.split(\",\").map(skill => skill.trim());\n          setCurrentStep(\"experience\");\n          break;\n        case \"experience\":\n          const [company, position, duration, responsibilities] = input.split(\"|\").map(item => item.trim());\n          newUserData.workExperience = [{\n            company,\n            position,\n            duration,\n            responsibilities\n          }];\n          setCurrentStep(\"education\");\n          break;\n        case \"education\":\n          const [degree, institution, year, gpa] = input.split(\"|\").map(item => item.trim());\n          newUserData.education = [{\n            degree,\n            institution,\n            year,\n            gpa: gpa || null\n          }];\n          setCurrentStep(\"certifications\");\n          break;\n        case \"certifications\":\n          if (input.trim()) {\n            const [name, organization, year] = input.split(\"|\").map(item => item.trim());\n            newUserData.certifications = [{\n              name,\n              organization,\n              year\n            }];\n          }\n          setCurrentStep(\"languages\");\n          break;\n        case \"languages\":\n          const [language, proficiency] = input.split(\"-\").map(item => item.trim());\n          newUserData.languages = [{\n            language,\n            proficiency\n          }];\n          setCurrentStep(\"projects\");\n          break;\n        case \"projects\":\n          if (input.trim()) {\n            const [name, description, technologies] = input.split(\"|\").map(item => item.trim());\n            newUserData.projects = [{\n              name,\n              description,\n              technologies\n            }];\n          }\n          setCurrentStep(\"awards\");\n          break;\n        case \"awards\":\n          if (input.trim()) {\n            const [name, organization, year] = input.split(\"|\").map(item => item.trim());\n            newUserData.awards = [{\n              name,\n              organization,\n              year\n            }];\n          }\n          setIsComplete(true);\n          break;\n        default:\n          console.log(\"Unknown step:\", currentStep);\n          break;\n      }\n      setUserData(newUserData);\n\n      // Simulate typing for bot response\n      const botResponse = await simulateTyping(data.nextQuestion);\n\n      // Add bot response\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: botResponse,\n        timestamp: new Date().toLocaleTimeString([], {\n          hour: \"2-digit\",\n          minute: \"2-digit\"\n        })\n      }]);\n\n      // Handle completion\n      if (data.isComplete) {\n        setIsComplete(true);\n        // Navigate to template selection page with user data\n        navigate(\"/select-template\", {\n          state: {\n            resumeData: newUserData\n          }\n        });\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      const errorMessage = await simulateTyping(\"Sorry, there was an error. Please try again.\");\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: errorMessage,\n        timestamp: new Date().toLocaleTimeString([], {\n          hour: \"2-digit\",\n          minute: \"2-digit\"\n        })\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Resume Builder AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-status\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-indicator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"AI Assistant Online\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-timestamp\",\n          children: message.timestamp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef,\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Type your response...\",\n        disabled: isComplete || isTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isComplete || isTyping || !input.trim(),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"6922vkfLx/qpsvcANZaZttOgFfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","type","text","timestamp","Date","toLocaleTimeString","hour","minute","input","setInput","currentStep","setCurrentStep","isComplete","setIsComplete","isTyping","setIsTyping","userData","setUserData","personalInfo","contact","professionalSummary","skills","workExperience","education","certifications","languages","projects","awards","messagesEndRef","inputRef","navigate","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","_inputRef$current","focus","handleInputChange","e","target","value","simulateTyping","response","Promise","resolve","setTimeout","Math","min","length","handleSubmit","preventDefault","trim","prev","toLowerCase","newUserData","fullName","title","email","phone","location","linkedin","console","log","fetch","method","headers","body","JSON","stringify","message","step","data","json","botResponse","nextQuestion","state","resumeData","error","errorMessage","split","map","skill","company","position","duration","responsibilities","item","degree","institution","year","gpa","name","organization","language","proficiency","description","technologies","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","ref","onSubmit","onChange","placeholder","disabled","viewBox","fill","stroke","strokeWidth","d","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Downloads/Chatbot/Chatbot/client/src/components/Chat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./Chat.css\";\r\n\r\nconst Chat = () => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      type: \"bot\",\r\n      text: \"Hello! I'll help you create your professional resume. What is your full name?\",\r\n      timestamp: new Date().toLocaleTimeString([], {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      }),\r\n    },\r\n  ]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [currentStep, setCurrentStep] = useState(\"name\");\r\n  const [isComplete, setIsComplete] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [userData, setUserData] = useState({\r\n    personalInfo: {},\r\n    contact: {},\r\n    professionalSummary: \"\",\r\n    skills: [],\r\n    workExperience: [],\r\n    education: [],\r\n    certifications: [],\r\n    languages: [],\r\n    projects: [],\r\n    awards: [],\r\n  });\r\n  const messagesEndRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n  const navigate = useNavigate();\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  // Focus input field when component mounts and after typing finishes\r\n  useEffect(() => {\r\n    if (!isTyping && !isComplete) {\r\n      inputRef.current?.focus();\r\n    }\r\n  }, [isTyping, isComplete]);\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const simulateTyping = async (response) => {\r\n    setIsTyping(true);\r\n    // Simulate typing delay based on message length\r\n    await new Promise((resolve) =>\r\n      setTimeout(resolve, Math.min(1000, response.length * 20))\r\n    );\r\n    setIsTyping(false);\r\n    return response;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!input.trim()) return;\r\n\r\n    const timestamp = new Date().toLocaleTimeString([], {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n    });\r\n\r\n    // Add user message\r\n    setMessages((prev) => [...prev, { type: \"user\", text: input, timestamp }]);\r\n    setInput(\"\");\r\n\r\n    try {\r\n      // Check if user wants to skip\r\n      if (input.toLowerCase().trim() === \"skip\") {\r\n        // Store empty data for the current step\r\n        const newUserData = { ...userData };\r\n        switch (currentStep) {\r\n          case \"name\":\r\n            newUserData.personalInfo.fullName = \"\";\r\n            setCurrentStep(\"title\");\r\n            break;\r\n          case \"title\":\r\n            newUserData.personalInfo.title = \"\";\r\n            setCurrentStep(\"email\");\r\n            break;\r\n          case \"email\":\r\n            newUserData.contact.email = \"\";\r\n            setCurrentStep(\"phone\");\r\n            break;\r\n          case \"phone\":\r\n            newUserData.contact.phone = \"\";\r\n            setCurrentStep(\"location\");\r\n            break;\r\n          case \"location\":\r\n            newUserData.contact.location = \"\";\r\n            setCurrentStep(\"linkedin\");\r\n            break;\r\n          case \"linkedin\":\r\n            newUserData.contact.linkedin = \"\";\r\n            setCurrentStep(\"summary\");\r\n            break;\r\n          case \"summary\":\r\n            newUserData.professionalSummary = \"\";\r\n            setCurrentStep(\"skills\");\r\n            break;\r\n          case \"skills\":\r\n            newUserData.skills = [];\r\n            setCurrentStep(\"experience\");\r\n            break;\r\n          case \"experience\":\r\n            newUserData.workExperience = [];\r\n            setCurrentStep(\"education\");\r\n            break;\r\n          case \"education\":\r\n            newUserData.education = [];\r\n            setCurrentStep(\"certifications\");\r\n            break;\r\n          case \"certifications\":\r\n            newUserData.certifications = [];\r\n            setCurrentStep(\"languages\");\r\n            break;\r\n          case \"languages\":\r\n            newUserData.languages = [];\r\n            setCurrentStep(\"projects\");\r\n            break;\r\n          case \"projects\":\r\n            newUserData.projects = [];\r\n            setCurrentStep(\"awards\");\r\n            break;\r\n          case \"awards\":\r\n            newUserData.awards = [];\r\n            setIsComplete(true);\r\n            break;\r\n          default:\r\n            console.log(\"Unknown step:\", currentStep);\r\n            break;\r\n        }\r\n        setUserData(newUserData);\r\n\r\n        // Get next question from server\r\n        const response = await fetch(\"http://localhost:3001/api/chat\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            message: \"\",\r\n            step: currentStep,\r\n          }),\r\n        });\r\n\r\n        const data = await response.json();\r\n        const botResponse = await simulateTyping(data.nextQuestion);\r\n\r\n        setMessages((prev) => [\r\n          ...prev,\r\n          {\r\n            type: \"bot\",\r\n            text: botResponse,\r\n            timestamp: new Date().toLocaleTimeString([], {\r\n              hour: \"2-digit\",\r\n              minute: \"2-digit\",\r\n            }),\r\n          },\r\n        ]);\r\n\r\n        if (data.isComplete) {\r\n          setIsComplete(true);\r\n          navigate(\"/select-template\", { state: { resumeData: newUserData } });\r\n        }\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(\"http://localhost:3001/api/chat\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          message: input,\r\n          step: currentStep,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.error) {\r\n        const errorMessage = await simulateTyping(\r\n          \"Sorry, something went wrong. Please try again.\"\r\n        );\r\n        setMessages((prev) => [\r\n          ...prev,\r\n          {\r\n            type: \"bot\",\r\n            text: errorMessage,\r\n            timestamp: new Date().toLocaleTimeString([], {\r\n              hour: \"2-digit\",\r\n              minute: \"2-digit\",\r\n            }),\r\n          },\r\n        ]);\r\n        return;\r\n      }\r\n\r\n      // Store user data\r\n      const newUserData = { ...userData };\r\n      switch (currentStep) {\r\n        case \"name\":\r\n          newUserData.personalInfo.fullName = input;\r\n          setCurrentStep(\"title\");\r\n          break;\r\n        case \"title\":\r\n          newUserData.personalInfo.title = input;\r\n          setCurrentStep(\"email\");\r\n          break;\r\n        case \"email\":\r\n          newUserData.contact.email = input;\r\n          setCurrentStep(\"phone\");\r\n          break;\r\n        case \"phone\":\r\n          newUserData.contact.phone = input;\r\n          setCurrentStep(\"location\");\r\n          break;\r\n        case \"location\":\r\n          newUserData.contact.location = input;\r\n          setCurrentStep(\"linkedin\");\r\n          break;\r\n        case \"linkedin\":\r\n          if (input.trim()) {\r\n            newUserData.contact.linkedin = input;\r\n          }\r\n          setCurrentStep(\"summary\");\r\n          break;\r\n        case \"summary\":\r\n          newUserData.professionalSummary = input;\r\n          setCurrentStep(\"skills\");\r\n          break;\r\n        case \"skills\":\r\n          newUserData.skills = input.split(\",\").map((skill) => skill.trim());\r\n          setCurrentStep(\"experience\");\r\n          break;\r\n        case \"experience\":\r\n          const [company, position, duration, responsibilities] = input\r\n            .split(\"|\")\r\n            .map((item) => item.trim());\r\n          newUserData.workExperience = [\r\n            {\r\n              company,\r\n              position,\r\n              duration,\r\n              responsibilities,\r\n            },\r\n          ];\r\n          setCurrentStep(\"education\");\r\n          break;\r\n        case \"education\":\r\n          const [degree, institution, year, gpa] = input\r\n            .split(\"|\")\r\n            .map((item) => item.trim());\r\n          newUserData.education = [\r\n            {\r\n              degree,\r\n              institution,\r\n              year,\r\n              gpa: gpa || null,\r\n            },\r\n          ];\r\n          setCurrentStep(\"certifications\");\r\n          break;\r\n        case \"certifications\":\r\n          if (input.trim()) {\r\n            const [name, organization, year] = input\r\n              .split(\"|\")\r\n              .map((item) => item.trim());\r\n            newUserData.certifications = [\r\n              {\r\n                name,\r\n                organization,\r\n                year,\r\n              },\r\n            ];\r\n          }\r\n          setCurrentStep(\"languages\");\r\n          break;\r\n        case \"languages\":\r\n          const [language, proficiency] = input\r\n            .split(\"-\")\r\n            .map((item) => item.trim());\r\n          newUserData.languages = [\r\n            {\r\n              language,\r\n              proficiency,\r\n            },\r\n          ];\r\n          setCurrentStep(\"projects\");\r\n          break;\r\n        case \"projects\":\r\n          if (input.trim()) {\r\n            const [name, description, technologies] = input\r\n              .split(\"|\")\r\n              .map((item) => item.trim());\r\n            newUserData.projects = [\r\n              {\r\n                name,\r\n                description,\r\n                technologies,\r\n              },\r\n            ];\r\n          }\r\n          setCurrentStep(\"awards\");\r\n          break;\r\n        case \"awards\":\r\n          if (input.trim()) {\r\n            const [name, organization, year] = input\r\n              .split(\"|\")\r\n              .map((item) => item.trim());\r\n            newUserData.awards = [\r\n              {\r\n                name,\r\n                organization,\r\n                year,\r\n              },\r\n            ];\r\n          }\r\n          setIsComplete(true);\r\n          break;\r\n        default:\r\n          console.log(\"Unknown step:\", currentStep);\r\n          break;\r\n      }\r\n      setUserData(newUserData);\r\n\r\n      // Simulate typing for bot response\r\n      const botResponse = await simulateTyping(data.nextQuestion);\r\n\r\n      // Add bot response\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        {\r\n          type: \"bot\",\r\n          text: botResponse,\r\n          timestamp: new Date().toLocaleTimeString([], {\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n          }),\r\n        },\r\n      ]);\r\n\r\n      // Handle completion\r\n      if (data.isComplete) {\r\n        setIsComplete(true);\r\n        // Navigate to template selection page with user data\r\n        navigate(\"/select-template\", { state: { resumeData: newUserData } });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      const errorMessage = await simulateTyping(\r\n        \"Sorry, there was an error. Please try again.\"\r\n      );\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        {\r\n          type: \"bot\",\r\n          text: errorMessage,\r\n          timestamp: new Date().toLocaleTimeString([], {\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n          }),\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <h1>Resume Builder AI</h1>\r\n        <div className=\"chat-status\">\r\n          <div className=\"status-indicator\"></div>\r\n          <span>AI Assistant Online</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.type}`}>\r\n            <div className=\"message-content\">{message.text}</div>\r\n            <div className=\"message-timestamp\">{message.timestamp}</div>\r\n          </div>\r\n        ))}\r\n        {isTyping && (\r\n          <div className=\"message bot\">\r\n            <div className=\"message-content\">\r\n              <div className=\"typing-indicator\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit} className=\"input-form\">\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Type your response...\"\r\n          disabled={isComplete || isTyping}\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          disabled={isComplete || isTyping || !input.trim()}\r\n        >\r\n          <span>Send</span>\r\n          <svg\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"2\"\r\n          >\r\n            <path d=\"M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z\" />\r\n          </svg>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}