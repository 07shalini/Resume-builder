{"ast":null,"code":"import Typo from \"typo-js\";\n\n// Initialize the spell checker with English dictionary\nconst dictionary = new Typo(\"en_US\");\nexport const checkSpelling = text => {\n  if (!text) return {\n    hasErrors: false,\n    suggestions: []\n  };\n  const words = text.split(/\\s+/);\n  const errors = [];\n  words.forEach(word => {\n    // Remove punctuation and convert to lowercase for checking\n    const cleanWord = word.replace(/[.,/#!$%^&*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n\n    // Skip empty strings and numbers\n    if (!cleanWord || /^\\d+$/.test(cleanWord)) return;\n    if (!dictionary.check(cleanWord)) {\n      const suggestions = dictionary.suggest(cleanWord);\n      errors.push({\n        word,\n        suggestions: suggestions.slice(0, 3) // Get top 3 suggestions\n      });\n    }\n  });\n  return {\n    hasErrors: errors.length > 0,\n    errors\n  };\n};\nexport const getHighlightedText = (text, errors) => {\n  if (!errors || errors.length === 0) return text;\n  let highlightedText = text;\n  errors.forEach(({\n    word\n  }) => {\n    const regex = new RegExp(`\\\\b${word}\\\\b`, \"gi\");\n    highlightedText = highlightedText.replace(regex, `<span class=\"spelling-error\" data-word=\"${word}\">${word}</span>`);\n  });\n  return highlightedText;\n};","map":{"version":3,"names":["Typo","dictionary","checkSpelling","text","hasErrors","suggestions","words","split","errors","forEach","word","cleanWord","replace","toLowerCase","test","check","suggest","push","slice","length","getHighlightedText","highlightedText","regex","RegExp"],"sources":["/Users/princevishal/Desktop/Chatbot/client/src/utils/spellChecker.js"],"sourcesContent":["import Typo from \"typo-js\";\n\n// Initialize the spell checker with English dictionary\nconst dictionary = new Typo(\"en_US\");\n\nexport const checkSpelling = (text) => {\n  if (!text) return { hasErrors: false, suggestions: [] };\n\n  const words = text.split(/\\s+/);\n  const errors = [];\n\n  words.forEach((word) => {\n    // Remove punctuation and convert to lowercase for checking\n    const cleanWord = word\n      .replace(/[.,/#!$%^&*;:{}=\\-_`~()]/g, \"\")\n      .toLowerCase();\n\n    // Skip empty strings and numbers\n    if (!cleanWord || /^\\d+$/.test(cleanWord)) return;\n\n    if (!dictionary.check(cleanWord)) {\n      const suggestions = dictionary.suggest(cleanWord);\n      errors.push({\n        word,\n        suggestions: suggestions.slice(0, 3), // Get top 3 suggestions\n      });\n    }\n  });\n\n  return {\n    hasErrors: errors.length > 0,\n    errors,\n  };\n};\n\nexport const getHighlightedText = (text, errors) => {\n  if (!errors || errors.length === 0) return text;\n\n  let highlightedText = text;\n  errors.forEach(({ word }) => {\n    const regex = new RegExp(`\\\\b${word}\\\\b`, \"gi\");\n    highlightedText = highlightedText.replace(\n      regex,\n      `<span class=\"spelling-error\" data-word=\"${word}\">${word}</span>`\n    );\n  });\n\n  return highlightedText;\n};\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,SAAS;;AAE1B;AACA,MAAMC,UAAU,GAAG,IAAID,IAAI,CAAC,OAAO,CAAC;AAEpC,OAAO,MAAME,aAAa,GAAIC,IAAI,IAAK;EACrC,IAAI,CAACA,IAAI,EAAE,OAAO;IAAEC,SAAS,EAAE,KAAK;IAAEC,WAAW,EAAE;EAAG,CAAC;EAEvD,MAAMC,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAC,KAAK,CAAC;EAC/B,MAAMC,MAAM,GAAG,EAAE;EAEjBF,KAAK,CAACG,OAAO,CAAEC,IAAI,IAAK;IACtB;IACA,MAAMC,SAAS,GAAGD,IAAI,CACnBE,OAAO,CAAC,2BAA2B,EAAE,EAAE,CAAC,CACxCC,WAAW,CAAC,CAAC;;IAEhB;IACA,IAAI,CAACF,SAAS,IAAI,OAAO,CAACG,IAAI,CAACH,SAAS,CAAC,EAAE;IAE3C,IAAI,CAACV,UAAU,CAACc,KAAK,CAACJ,SAAS,CAAC,EAAE;MAChC,MAAMN,WAAW,GAAGJ,UAAU,CAACe,OAAO,CAACL,SAAS,CAAC;MACjDH,MAAM,CAACS,IAAI,CAAC;QACVP,IAAI;QACJL,WAAW,EAAEA,WAAW,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE;MACxC,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,OAAO;IACLd,SAAS,EAAEI,MAAM,CAACW,MAAM,GAAG,CAAC;IAC5BX;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMY,kBAAkB,GAAGA,CAACjB,IAAI,EAAEK,MAAM,KAAK;EAClD,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACW,MAAM,KAAK,CAAC,EAAE,OAAOhB,IAAI;EAE/C,IAAIkB,eAAe,GAAGlB,IAAI;EAC1BK,MAAM,CAACC,OAAO,CAAC,CAAC;IAAEC;EAAK,CAAC,KAAK;IAC3B,MAAMY,KAAK,GAAG,IAAIC,MAAM,CAAC,MAAMb,IAAI,KAAK,EAAE,IAAI,CAAC;IAC/CW,eAAe,GAAGA,eAAe,CAACT,OAAO,CACvCU,KAAK,EACL,2CAA2CZ,IAAI,KAAKA,IAAI,SAC1D,CAAC;EACH,CAAC,CAAC;EAEF,OAAOW,eAAe;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}