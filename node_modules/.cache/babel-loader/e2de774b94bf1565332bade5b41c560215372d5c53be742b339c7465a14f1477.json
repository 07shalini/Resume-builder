{"ast":null,"code":"var _jsxFileName = \"/Users/princevishal/Desktop/Chatbot copy/client/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SECTIONS = [{\n  id: \"personalInfo\",\n  title: \"Personal Information\"\n}, {\n  id: \"contact\",\n  title: \"Contact Details\"\n}, {\n  id: \"summary\",\n  title: \"Professional Summary\"\n}, {\n  id: \"skills\",\n  title: \"Skills\"\n}, {\n  id: \"experience\",\n  title: \"Work Experience\"\n}, {\n  id: \"education\",\n  title: \"Education\"\n}, {\n  id: \"certifications\",\n  title: \"Certifications\"\n}, {\n  id: \"languages\",\n  title: \"Languages\"\n}, {\n  id: \"projects\",\n  title: \"Projects\"\n}, {\n  id: \"awards\",\n  title: \"Awards\"\n}];\nconst Chat = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([{\n    type: \"bot\",\n    content: \"Hi! Let's create your professional resume. What's your full name?\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(\"name\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const [progress, setProgress] = useState(0);\n  const [currentSection, setCurrentSection] = useState(\"personalInfo\");\n  const [resumeData, setResumeData] = useState({\n    personalInfo: {},\n    contact: {},\n    professionalSummary: \"\",\n    skills: [],\n    workExperience: [],\n    education: [],\n    certifications: [],\n    languages: [],\n    projects: [],\n    awards: []\n  });\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const getCurrentSectionIndex = () => {\n    const stepToSection = {\n      name: \"personalInfo\",\n      title: \"personalInfo\",\n      email: \"contact\",\n      phone: \"contact\",\n      location: \"contact\",\n      linkedin: \"contact\",\n      summary: \"summary\",\n      skills: \"skills\",\n      experience: \"experience\",\n      education: \"education\",\n      certifications: \"certifications\",\n      languages: \"languages\",\n      projects: \"projects\",\n      awards: \"awards\"\n    };\n    return SECTIONS.findIndex(section => section.id === stepToSection[currentStep]);\n  };\n  const getSectionStatus = sectionId => {\n    const currentIndex = getCurrentSectionIndex();\n    const sectionIndex = SECTIONS.findIndex(section => section.id === sectionId);\n    if (sectionIndex < currentIndex) return \"completed\";\n    if (sectionIndex === currentIndex) return \"current\";\n    return \"pending\";\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMessage = input.trim();\n    setInput(\"\");\n    setMessages(prev => [...prev, {\n      type: \"user\",\n      content: userMessage\n    }]);\n    setIsTyping(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: userMessage,\n          step: currentStep\n        })\n      });\n      const data = await response.json();\n      setIsTyping(false);\n      if (data.error) {\n        setMessages(prev => [...prev, {\n          type: \"bot\",\n          content: \"Sorry, something went wrong. Please try again.\"\n        }]);\n        return;\n      }\n\n      // Update resume data based on current step\n      const newResumeData = {\n        ...resumeData\n      };\n      switch (currentStep) {\n        case \"name\":\n          newResumeData.personalInfo.fullName = userMessage;\n          break;\n        case \"title\":\n          newResumeData.personalInfo.title = userMessage;\n          break;\n        case \"email\":\n          newResumeData.contact.email = userMessage;\n          break;\n        case \"phone\":\n          newResumeData.contact.phone = userMessage;\n          break;\n        case \"location\":\n          newResumeData.contact.location = userMessage;\n          break;\n        case \"linkedin\":\n          if (userMessage.toLowerCase() !== \"skip\") {\n            newResumeData.contact.linkedin = userMessage;\n          }\n          break;\n        case \"summary\":\n          newResumeData.professionalSummary = userMessage;\n          break;\n        case \"skills\":\n          newResumeData.skills = userMessage.split(\",\").map(skill => skill.trim());\n          break;\n        case \"experience\":\n          if (userMessage.toLowerCase() !== \"done\") {\n            const [company, position, duration, responsibilities] = userMessage.split(\"|\").map(item => item.trim());\n            newResumeData.workExperience.push({\n              company,\n              position,\n              duration,\n              responsibilities\n            });\n          }\n          break;\n        case \"education\":\n          if (userMessage.toLowerCase() !== \"done\") {\n            const [degree, institution, year, gpa] = userMessage.split(\"|\").map(item => item.trim());\n            newResumeData.education.push({\n              degree,\n              institution,\n              year,\n              gpa: gpa || null\n            });\n          }\n          break;\n        case \"certifications\":\n          if (userMessage.toLowerCase() !== \"done\") {\n            const [name, organization, year] = userMessage.split(\"|\").map(item => item.trim());\n            newResumeData.certifications.push({\n              name,\n              organization,\n              year\n            });\n          }\n          break;\n        case \"languages\":\n          if (userMessage.toLowerCase() !== \"done\") {\n            const [language, proficiency] = userMessage.split(\"-\").map(item => item.trim());\n            newResumeData.languages.push({\n              language,\n              proficiency\n            });\n          }\n          break;\n        case \"projects\":\n          if (userMessage.toLowerCase() !== \"done\") {\n            const [name, description, technologies] = userMessage.split(\"|\").map(item => item.trim());\n            newResumeData.projects.push({\n              name,\n              description,\n              technologies\n            });\n          }\n          break;\n        case \"awards\":\n          if (userMessage.toLowerCase() !== \"done\") {\n            const [name, organization, year] = userMessage.split(\"|\").map(item => item.trim());\n            newResumeData.awards.push({\n              name,\n              organization,\n              year\n            });\n          }\n          break;\n        default:\n          break;\n      }\n      setResumeData(newResumeData);\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        content: data.nextQuestion\n      }]);\n\n      // Update progress\n      const currentIndex = getCurrentSectionIndex();\n      setProgress((currentIndex + 1) / SECTIONS.length * 100);\n      if (data.isComplete || userMessage.toLowerCase() === \"done\" && currentStep === \"awards\") {\n        // Navigate to template selection with the complete resume data\n        navigate(\"/select-template\", {\n          state: {\n            resumeData: newResumeData\n          }\n        });\n        return;\n      }\n\n      // Update current step based on the conversation flow\n      const stepMapping = {\n        name: \"title\",\n        title: \"email\",\n        email: \"phone\",\n        phone: \"location\",\n        location: \"linkedin\",\n        linkedin: \"summary\",\n        summary: \"skills\",\n        skills: \"experience\",\n        experience: data.nextQuestion.includes(\"education\") ? \"education\" : \"experience\",\n        education: data.nextQuestion.includes(\"certification\") ? \"certifications\" : \"education\",\n        certifications: data.nextQuestion.includes(\"language\") ? \"languages\" : \"certifications\",\n        languages: data.nextQuestion.includes(\"project\") ? \"projects\" : \"languages\",\n        projects: data.nextQuestion.includes(\"award\") ? \"awards\" : \"projects\",\n        awards: \"complete\"\n      };\n      setCurrentStep(stepMapping[currentStep]);\n\n      // Update current section\n      const stepToSection = {\n        name: \"personalInfo\",\n        title: \"personalInfo\",\n        email: \"contact\",\n        phone: \"contact\",\n        location: \"contact\",\n        linkedin: \"contact\",\n        summary: \"summary\",\n        skills: \"skills\",\n        experience: \"experience\",\n        education: \"education\",\n        certifications: \"certifications\",\n        languages: \"languages\",\n        projects: \"projects\",\n        awards: \"awards\"\n      };\n      setCurrentSection(stepToSection[stepMapping[currentStep]]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setIsTyping(false);\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        content: \"Sorry, something went wrong. Please try again.\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Resume Builder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-progress\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-fill\",\n            style: {\n              width: `${progress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"progress-text\",\n          children: [Math.round(progress), \"% Complete\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.type}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 13\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"typing-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"typing-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"typing-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: \"Resume Sections\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), SECTIONS.map(section => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-status\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `status-icon ${getSectionStatus(section.id)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status-text\",\n            children: section.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this)]\n        }, section.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your response...\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 24 24\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M5 12h14M12 5l7 7-7 7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"k79++EXPHczO5UWfBDNME2ETHuI=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","jsxDEV","_jsxDEV","SECTIONS","id","title","Chat","_s","navigate","messages","setMessages","type","content","input","setInput","currentStep","setCurrentStep","isTyping","setIsTyping","messagesEndRef","progress","setProgress","currentSection","setCurrentSection","resumeData","setResumeData","personalInfo","contact","professionalSummary","skills","workExperience","education","certifications","languages","projects","awards","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","getCurrentSectionIndex","stepToSection","name","email","phone","location","linkedin","summary","experience","findIndex","section","getSectionStatus","sectionId","currentIndex","sectionIndex","handleSubmit","e","preventDefault","trim","userMessage","prev","response","fetch","method","headers","body","JSON","stringify","message","step","data","json","error","newResumeData","fullName","toLowerCase","split","map","skill","company","position","duration","responsibilities","item","push","degree","institution","year","gpa","organization","language","proficiency","description","technologies","nextQuestion","length","isComplete","state","stepMapping","includes","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","Math","round","index","ref","onSubmit","value","onChange","target","placeholder","viewBox","d","_c","$RefreshReg$"],"sources":["/Users/princevishal/Desktop/Chatbot copy/client/src/components/Chat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Chat.css\";\n\nconst SECTIONS = [\n  { id: \"personalInfo\", title: \"Personal Information\" },\n  { id: \"contact\", title: \"Contact Details\" },\n  { id: \"summary\", title: \"Professional Summary\" },\n  { id: \"skills\", title: \"Skills\" },\n  { id: \"experience\", title: \"Work Experience\" },\n  { id: \"education\", title: \"Education\" },\n  { id: \"certifications\", title: \"Certifications\" },\n  { id: \"languages\", title: \"Languages\" },\n  { id: \"projects\", title: \"Projects\" },\n  { id: \"awards\", title: \"Awards\" },\n];\n\nconst Chat = () => {\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([\n    {\n      type: \"bot\",\n      content:\n        \"Hi! Let's create your professional resume. What's your full name?\",\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(\"name\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const [progress, setProgress] = useState(0);\n  const [currentSection, setCurrentSection] = useState(\"personalInfo\");\n  const [resumeData, setResumeData] = useState({\n    personalInfo: {},\n    contact: {},\n    professionalSummary: \"\",\n    skills: [],\n    workExperience: [],\n    education: [],\n    certifications: [],\n    languages: [],\n    projects: [],\n    awards: [],\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const getCurrentSectionIndex = () => {\n    const stepToSection = {\n      name: \"personalInfo\",\n      title: \"personalInfo\",\n      email: \"contact\",\n      phone: \"contact\",\n      location: \"contact\",\n      linkedin: \"contact\",\n      summary: \"summary\",\n      skills: \"skills\",\n      experience: \"experience\",\n      education: \"education\",\n      certifications: \"certifications\",\n      languages: \"languages\",\n      projects: \"projects\",\n      awards: \"awards\",\n    };\n\n    return SECTIONS.findIndex(\n      (section) => section.id === stepToSection[currentStep]\n    );\n  };\n\n  const getSectionStatus = (sectionId) => {\n    const currentIndex = getCurrentSectionIndex();\n    const sectionIndex = SECTIONS.findIndex(\n      (section) => section.id === sectionId\n    );\n\n    if (sectionIndex < currentIndex) return \"completed\";\n    if (sectionIndex === currentIndex) return \"current\";\n    return \"pending\";\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    const userMessage = input.trim();\n    setInput(\"\");\n    setMessages((prev) => [...prev, { type: \"user\", content: userMessage }]);\n    setIsTyping(true);\n\n    try {\n      const response = await fetch(\"http://localhost:3001/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          message: userMessage,\n          step: currentStep,\n        }),\n      });\n\n      const data = await response.json();\n      setIsTyping(false);\n\n      if (data.error) {\n        setMessages((prev) => [\n          ...prev,\n          {\n            type: \"bot\",\n            content: \"Sorry, something went wrong. Please try again.\",\n          },\n        ]);\n        return;\n      }\n\n      // Update resume data based on current step\n      const newResumeData = { ...resumeData };\n      switch (currentStep) {\n        case \"name\":\n          newResumeData.personalInfo.fullName = userMessage;\n          break;\n        case \"title\":\n          newResumeData.personalInfo.title = userMessage;\n          break;\n        case \"email\":\n          newResumeData.contact.email = userMessage;\n          break;\n        case \"phone\":\n          newResumeData.contact.phone = userMessage;\n          break;\n        case \"location\":\n          newResumeData.contact.location = userMessage;\n          break;\n        case \"linkedin\":\n          if (userMessage.toLowerCase() !== \"skip\") {\n            newResumeData.contact.linkedin = userMessage;\n          }\n          break;\n        case \"summary\":\n          newResumeData.professionalSummary = userMessage;\n          break;\n        case \"skills\":\n          newResumeData.skills = userMessage\n            .split(\",\")\n            .map((skill) => skill.trim());\n          break;\n        case \"experience\":\n          if (userMessage.toLowerCase() !== \"done\") {\n            const [company, position, duration, responsibilities] = userMessage\n              .split(\"|\")\n              .map((item) => item.trim());\n            newResumeData.workExperience.push({\n              company,\n              position,\n              duration,\n              responsibilities,\n            });\n          }\n          break;\n        case \"education\":\n          if (userMessage.toLowerCase() !== \"done\") {\n            const [degree, institution, year, gpa] = userMessage\n              .split(\"|\")\n              .map((item) => item.trim());\n            newResumeData.education.push({\n              degree,\n              institution,\n              year,\n              gpa: gpa || null,\n            });\n          }\n          break;\n        case \"certifications\":\n          if (userMessage.toLowerCase() !== \"done\") {\n            const [name, organization, year] = userMessage\n              .split(\"|\")\n              .map((item) => item.trim());\n            newResumeData.certifications.push({ name, organization, year });\n          }\n          break;\n        case \"languages\":\n          if (userMessage.toLowerCase() !== \"done\") {\n            const [language, proficiency] = userMessage\n              .split(\"-\")\n              .map((item) => item.trim());\n            newResumeData.languages.push({ language, proficiency });\n          }\n          break;\n        case \"projects\":\n          if (userMessage.toLowerCase() !== \"done\") {\n            const [name, description, technologies] = userMessage\n              .split(\"|\")\n              .map((item) => item.trim());\n            newResumeData.projects.push({ name, description, technologies });\n          }\n          break;\n        case \"awards\":\n          if (userMessage.toLowerCase() !== \"done\") {\n            const [name, organization, year] = userMessage\n              .split(\"|\")\n              .map((item) => item.trim());\n            newResumeData.awards.push({ name, organization, year });\n          }\n          break;\n        default:\n          break;\n      }\n      setResumeData(newResumeData);\n\n      setMessages((prev) => [\n        ...prev,\n        { type: \"bot\", content: data.nextQuestion },\n      ]);\n\n      // Update progress\n      const currentIndex = getCurrentSectionIndex();\n      setProgress(((currentIndex + 1) / SECTIONS.length) * 100);\n\n      if (\n        data.isComplete ||\n        (userMessage.toLowerCase() === \"done\" && currentStep === \"awards\")\n      ) {\n        // Navigate to template selection with the complete resume data\n        navigate(\"/select-template\", { state: { resumeData: newResumeData } });\n        return;\n      }\n\n      // Update current step based on the conversation flow\n      const stepMapping = {\n        name: \"title\",\n        title: \"email\",\n        email: \"phone\",\n        phone: \"location\",\n        location: \"linkedin\",\n        linkedin: \"summary\",\n        summary: \"skills\",\n        skills: \"experience\",\n        experience: data.nextQuestion.includes(\"education\")\n          ? \"education\"\n          : \"experience\",\n        education: data.nextQuestion.includes(\"certification\")\n          ? \"certifications\"\n          : \"education\",\n        certifications: data.nextQuestion.includes(\"language\")\n          ? \"languages\"\n          : \"certifications\",\n        languages: data.nextQuestion.includes(\"project\")\n          ? \"projects\"\n          : \"languages\",\n        projects: data.nextQuestion.includes(\"award\") ? \"awards\" : \"projects\",\n        awards: \"complete\",\n      };\n      setCurrentStep(stepMapping[currentStep]);\n\n      // Update current section\n      const stepToSection = {\n        name: \"personalInfo\",\n        title: \"personalInfo\",\n        email: \"contact\",\n        phone: \"contact\",\n        location: \"contact\",\n        linkedin: \"contact\",\n        summary: \"summary\",\n        skills: \"skills\",\n        experience: \"experience\",\n        education: \"education\",\n        certifications: \"certifications\",\n        languages: \"languages\",\n        projects: \"projects\",\n        awards: \"awards\",\n      };\n      setCurrentSection(stepToSection[stepMapping[currentStep]]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setIsTyping(false);\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"bot\",\n          content: \"Sorry, something went wrong. Please try again.\",\n        },\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-header\">\n        <h1>Resume Builder</h1>\n        <div className=\"chat-progress\">\n          <div className=\"progress-bar\">\n            <div\n              className=\"progress-fill\"\n              style={{ width: `${progress}%` }}\n            ></div>\n          </div>\n          <span className=\"progress-text\">\n            {Math.round(progress)}% Complete\n          </span>\n        </div>\n      </div>\n\n      <div className=\"chat-main\">\n        <div className=\"chat-messages\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.type}`}>\n              <div className=\"message-content\">{message.content}</div>\n            </div>\n          ))}\n          {isTyping && (\n            <div className=\"message bot\">\n              <div className=\"typing-indicator\">\n                <div className=\"typing-dot\"></div>\n                <div className=\"typing-dot\"></div>\n                <div className=\"typing-dot\"></div>\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <div className=\"chat-sidebar\">\n          <h2 className=\"section-title\">Resume Sections</h2>\n          {SECTIONS.map((section) => (\n            <div key={section.id} className=\"section-status\">\n              <div\n                className={`status-icon ${getSectionStatus(section.id)}`}\n              ></div>\n              <span className=\"status-text\">{section.title}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"chat-input-container\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your response...\"\n          className=\"chat-input\"\n        />\n        <button type=\"submit\" className=\"send-button\">\n          <svg viewBox=\"0 0 24 24\">\n            <path d=\"M5 12h14M12 5l7 7-7 7\" />\n          </svg>\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}