{"ast":null,"code":"var _jsxFileName = \"/Users/princevishal/Desktop/Chatbot/client/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { checkSpelling, getHighlightedText } from \"../utils/spellChecker\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    type: \"bot\",\n    text: \"Hello! I'll help you create your resume. What is your full name?\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(\"name\");\n  const [isComplete, setIsComplete] = useState(false);\n  const [showAtsPrompt, setShowAtsPrompt] = useState(false);\n  const [atsScore, setAtsScore] = useState(null);\n  const [userData, setUserData] = useState({});\n  const [spellErrors, setSpellErrors] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedWord, setSelectedWord] = useState(null);\n  const messagesEndRef = useRef(null);\n  const navigate = useNavigate();\n  const handleWordClick = useCallback(word => {\n    const error = spellErrors.find(err => err.word === word);\n    if (error) {\n      setSelectedWord({\n        word,\n        suggestions: error.suggestions\n      });\n      setShowSuggestions(true);\n    }\n  }, [spellErrors]);\n  useEffect(() => {\n    // Make handleWordClick available globally\n    window.handleWordClick = handleWordClick;\n    return () => {\n      delete window.handleWordClick;\n    };\n  }, [handleWordClick]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleInputChange = e => {\n    const newInput = e.target.value;\n    setInput(newInput);\n\n    // Check spelling as user types\n    const {\n      errors\n    } = checkSpelling(newInput);\n    setSpellErrors(errors);\n  };\n  const handleSuggestionClick = suggestion => {\n    const newInput = input.replace(new RegExp(`\\\\b${selectedWord.word}\\\\b`, \"gi\"), suggestion);\n    setInput(newInput);\n    setShowSuggestions(false);\n    setSelectedWord(null);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Add user message\n    setMessages(prev => [...prev, {\n      type: \"user\",\n      text: input\n    }]);\n    try {\n      const response = await fetch(\"http://localhost:3001/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input,\n          step: currentStep\n        })\n      });\n      const data = await response.json();\n      if (data.error) {\n        setMessages(prev => [...prev, {\n          type: \"bot\",\n          text: \"Sorry, something went wrong. Please try again.\"\n        }]);\n        return;\n      }\n\n      // Store user data\n      const newUserData = {\n        ...userData\n      };\n      switch (currentStep) {\n        case \"name\":\n          newUserData.name = input;\n          break;\n        case \"email\":\n          newUserData.email = input;\n          break;\n        case \"skills\":\n          newUserData.skills = input.split(\",\").map(skill => skill.trim());\n          break;\n        case \"experience\":\n          newUserData.experience = input;\n          break;\n        case \"education\":\n          newUserData.education = input;\n          break;\n        default:\n          console.log(\"Unknown step:\", currentStep);\n          break;\n      }\n      setUserData(newUserData);\n\n      // Add bot response\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: data.nextQuestion\n      }]);\n\n      // Update step\n      if (data.isComplete) {\n        setIsComplete(true);\n        // Navigate to preview page with user data\n        navigate(\"/resume-preview\", {\n          state: {\n            resumeData: newUserData\n          }\n        });\n      } else {\n        const steps = [\"name\", \"email\", \"skills\", \"experience\", \"education\"];\n        const currentIndex = steps.indexOf(currentStep);\n        setCurrentStep(steps[currentIndex + 1]);\n      }\n      setInput(\"\");\n      setSpellErrors([]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: \"Sorry, something went wrong. Please try again.\"\n      }]);\n    }\n  };\n  const handleGenerateResume = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3001/api/generate-resume\", {\n        method: \"POST\"\n      });\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"resume.pdf\";\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n\n        // Show ATS prompt after resume generation\n        setShowAtsPrompt(true);\n        setMessages(prev => [...prev, {\n          type: \"bot\",\n          text: \"Would you like to check how well your resume matches a specific job description? Paste the job description below.\"\n        }]);\n      } else {\n        setMessages(prev => [...prev, {\n          type: \"bot\",\n          text: \"Sorry, there was an error generating your resume.\"\n        }]);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: \"Sorry, there was an error generating your resume.\"\n      }]);\n    }\n  };\n  const handleAtsScore = async jobDescription => {\n    try {\n      const response = await fetch(\"http://localhost:3001/api/score-resume\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          jobDescription\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setAtsScore(data);\n        setMessages(prev => [...prev, {\n          type: \"bot\",\n          text: `Your resume scored ${data.score}% for this job!\\n\\nKeyword Match: ${data.details.keywordMatch}%\\nTitle Match: ${data.details.titleMatch}%\\n\\nMatching Keywords: ${data.details.matchingKeywords.join(\", \")}`\n        }]);\n      } else {\n        setMessages(prev => [...prev, {\n          type: \"bot\",\n          text: \"Sorry, there was an error scoring your resume.\"\n        }]);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: \"Sorry, there was an error scoring your resume.\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          dangerouslySetInnerHTML: {\n            __html: message.type === \"user\" ? getHighlightedText(message.text, spellErrors, handleWordClick) : message.text\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), isComplete ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"generate-button\",\n        onClick: handleGenerateResume,\n        children: \"Generate Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: handleInputChange,\n          placeholder: \"Type your answer...\",\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), showSuggestions && selectedWord && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestions-popup\",\n          children: selectedWord.suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"suggestion-item\",\n            onClick: () => handleSuggestionClick(suggestion),\n            children: suggestion\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }, this), showAtsPrompt && !atsScore && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        handleAtsScore(input);\n        setInput(\"\");\n      },\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Paste the job description here...\",\n        className: \"chat-input\",\n        rows: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        children: \"Score Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"KY3qDFE7v0H49WzqCJKzyVcvhag=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","useNavigate","checkSpelling","getHighlightedText","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","type","text","input","setInput","currentStep","setCurrentStep","isComplete","setIsComplete","showAtsPrompt","setShowAtsPrompt","atsScore","setAtsScore","userData","setUserData","spellErrors","setSpellErrors","showSuggestions","setShowSuggestions","selectedWord","setSelectedWord","messagesEndRef","navigate","handleWordClick","word","error","find","err","suggestions","window","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleInputChange","e","newInput","target","value","errors","handleSuggestionClick","suggestion","replace","RegExp","handleSubmit","preventDefault","trim","prev","response","fetch","method","headers","body","JSON","stringify","message","step","data","json","newUserData","name","email","skills","split","map","skill","experience","education","console","log","nextQuestion","state","resumeData","steps","currentIndex","indexOf","handleGenerateResume","ok","blob","url","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","revokeObjectURL","removeChild","handleAtsScore","jobDescription","score","details","keywordMatch","titleMatch","matchingKeywords","join","className","children","index","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","onSubmit","onChange","placeholder","rows","_c","$RefreshReg$"],"sources":["/Users/princevishal/Desktop/Chatbot/client/src/components/Chat.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { checkSpelling, getHighlightedText } from \"../utils/spellChecker\";\nimport \"./Chat.css\";\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([\n    {\n      type: \"bot\",\n      text: \"Hello! I'll help you create your resume. What is your full name?\",\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(\"name\");\n  const [isComplete, setIsComplete] = useState(false);\n  const [showAtsPrompt, setShowAtsPrompt] = useState(false);\n  const [atsScore, setAtsScore] = useState(null);\n  const [userData, setUserData] = useState({});\n  const [spellErrors, setSpellErrors] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedWord, setSelectedWord] = useState(null);\n  const messagesEndRef = useRef(null);\n  const navigate = useNavigate();\n\n  const handleWordClick = useCallback(\n    (word) => {\n      const error = spellErrors.find((err) => err.word === word);\n      if (error) {\n        setSelectedWord({ word, suggestions: error.suggestions });\n        setShowSuggestions(true);\n      }\n    },\n    [spellErrors]\n  );\n\n  useEffect(() => {\n    // Make handleWordClick available globally\n    window.handleWordClick = handleWordClick;\n    return () => {\n      delete window.handleWordClick;\n    };\n  }, [handleWordClick]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleInputChange = (e) => {\n    const newInput = e.target.value;\n    setInput(newInput);\n\n    // Check spelling as user types\n    const { errors } = checkSpelling(newInput);\n    setSpellErrors(errors);\n  };\n\n  const handleSuggestionClick = (suggestion) => {\n    const newInput = input.replace(\n      new RegExp(`\\\\b${selectedWord.word}\\\\b`, \"gi\"),\n      suggestion\n    );\n    setInput(newInput);\n    setShowSuggestions(false);\n    setSelectedWord(null);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Add user message\n    setMessages((prev) => [...prev, { type: \"user\", text: input }]);\n\n    try {\n      const response = await fetch(\"http://localhost:3001/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          message: input,\n          step: currentStep,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.error) {\n        setMessages((prev) => [\n          ...prev,\n          {\n            type: \"bot\",\n            text: \"Sorry, something went wrong. Please try again.\",\n          },\n        ]);\n        return;\n      }\n\n      // Store user data\n      const newUserData = { ...userData };\n      switch (currentStep) {\n        case \"name\":\n          newUserData.name = input;\n          break;\n        case \"email\":\n          newUserData.email = input;\n          break;\n        case \"skills\":\n          newUserData.skills = input.split(\",\").map((skill) => skill.trim());\n          break;\n        case \"experience\":\n          newUserData.experience = input;\n          break;\n        case \"education\":\n          newUserData.education = input;\n          break;\n        default:\n          console.log(\"Unknown step:\", currentStep);\n          break;\n      }\n      setUserData(newUserData);\n\n      // Add bot response\n      setMessages((prev) => [\n        ...prev,\n        { type: \"bot\", text: data.nextQuestion },\n      ]);\n\n      // Update step\n      if (data.isComplete) {\n        setIsComplete(true);\n        // Navigate to preview page with user data\n        navigate(\"/resume-preview\", { state: { resumeData: newUserData } });\n      } else {\n        const steps = [\"name\", \"email\", \"skills\", \"experience\", \"education\"];\n        const currentIndex = steps.indexOf(currentStep);\n        setCurrentStep(steps[currentIndex + 1]);\n      }\n\n      setInput(\"\");\n      setSpellErrors([]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages((prev) => [\n        ...prev,\n        { type: \"bot\", text: \"Sorry, something went wrong. Please try again.\" },\n      ]);\n    }\n  };\n\n  const handleGenerateResume = async () => {\n    try {\n      const response = await fetch(\n        \"http://localhost:3001/api/generate-resume\",\n        {\n          method: \"POST\",\n        }\n      );\n\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"resume.pdf\";\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n\n        // Show ATS prompt after resume generation\n        setShowAtsPrompt(true);\n        setMessages((prev) => [\n          ...prev,\n          {\n            type: \"bot\",\n            text: \"Would you like to check how well your resume matches a specific job description? Paste the job description below.\",\n          },\n        ]);\n      } else {\n        setMessages((prev) => [\n          ...prev,\n          {\n            type: \"bot\",\n            text: \"Sorry, there was an error generating your resume.\",\n          },\n        ]);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"bot\",\n          text: \"Sorry, there was an error generating your resume.\",\n        },\n      ]);\n    }\n  };\n\n  const handleAtsScore = async (jobDescription) => {\n    try {\n      const response = await fetch(\"http://localhost:3001/api/score-resume\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ jobDescription }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setAtsScore(data);\n        setMessages((prev) => [\n          ...prev,\n          {\n            type: \"bot\",\n            text: `Your resume scored ${\n              data.score\n            }% for this job!\\n\\nKeyword Match: ${\n              data.details.keywordMatch\n            }%\\nTitle Match: ${\n              data.details.titleMatch\n            }%\\n\\nMatching Keywords: ${data.details.matchingKeywords.join(\n              \", \"\n            )}`,\n          },\n        ]);\n      } else {\n        setMessages((prev) => [\n          ...prev,\n          {\n            type: \"bot\",\n            text: \"Sorry, there was an error scoring your resume.\",\n          },\n        ]);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"bot\",\n          text: \"Sorry, there was an error scoring your resume.\",\n        },\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"messages\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.type}`}>\n            <div\n              className=\"message-content\"\n              dangerouslySetInnerHTML={{\n                __html:\n                  message.type === \"user\"\n                    ? getHighlightedText(\n                        message.text,\n                        spellErrors,\n                        handleWordClick\n                      )\n                    : message.text,\n              }}\n            />\n          </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      {isComplete ? (\n        <div className=\"button-container\">\n          <button className=\"generate-button\" onClick={handleGenerateResume}>\n            Generate Resume\n          </button>\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit} className=\"input-form\">\n          <div className=\"input-container\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={handleInputChange}\n              placeholder=\"Type your answer...\"\n              className=\"chat-input\"\n            />\n            {showSuggestions && selectedWord && (\n              <div className=\"suggestions-popup\">\n                {selectedWord.suggestions.map((suggestion, index) => (\n                  <div\n                    key={index}\n                    className=\"suggestion-item\"\n                    onClick={() => handleSuggestionClick(suggestion)}\n                  >\n                    {suggestion}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          <button type=\"submit\" className=\"send-button\">\n            Send\n          </button>\n        </form>\n      )}\n      {showAtsPrompt && !atsScore && (\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            handleAtsScore(input);\n            setInput(\"\");\n          }}\n          className=\"input-form\"\n        >\n          <textarea\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Paste the job description here...\"\n            className=\"chat-input\"\n            rows={4}\n          />\n          <button type=\"submit\" className=\"send-button\">\n            Score Resume\n          </button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}