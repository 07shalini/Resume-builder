{"ast":null,"code":"var _jsxFileName = \"/Users/princevishal/Desktop/Chatbot/client/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    type: \"bot\",\n    text: \"Hello! I'll help you create your professional resume. What is your full name?\",\n    timestamp: new Date().toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    })\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(\"name\");\n  const [isComplete, setIsComplete] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [userData, setUserData] = useState({\n    personalInfo: {},\n    contact: {},\n    professionalSummary: \"\",\n    skills: [],\n    workExperience: [],\n    education: [],\n    certifications: [],\n    languages: [],\n    projects: [],\n    awards: []\n  });\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const navigate = useNavigate();\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Focus input field when component mounts and after typing finishes\n  useEffect(() => {\n    if (!isTyping && !isComplete) {\n      var _inputRef$current;\n      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n    }\n  }, [isTyping, isComplete]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const simulateTyping = async response => {\n    setIsTyping(true);\n    // Simulate typing delay based on message length\n    await new Promise(resolve => setTimeout(resolve, Math.min(1000, response.length * 20)));\n    setIsTyping(false);\n    return response;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const timestamp = new Date().toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n\n    // Add user message\n    setMessages(prev => [...prev, {\n      type: \"user\",\n      text: input,\n      timestamp\n    }]);\n    setInput(\"\");\n    try {\n      const response = await fetch(\"http://localhost:3001/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input,\n          step: currentStep\n        })\n      });\n      const data = await response.json();\n      if (data.error) {\n        const errorMessage = await simulateTyping(\"Sorry, something went wrong. Please try again.\");\n        setMessages(prev => [...prev, {\n          type: \"bot\",\n          text: errorMessage,\n          timestamp: new Date().toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\"\n          })\n        }]);\n        return;\n      }\n\n      // Store user data\n      const newUserData = {\n        ...userData\n      };\n      switch (currentStep) {\n        case \"name\":\n          newUserData.personalInfo.fullName = input;\n          setCurrentStep(\"title\");\n          break;\n        case \"title\":\n          newUserData.personalInfo.title = input;\n          setCurrentStep(\"email\");\n          break;\n        case \"email\":\n          newUserData.contact.email = input;\n          setCurrentStep(\"phone\");\n          break;\n        case \"phone\":\n          newUserData.contact.phone = input;\n          setCurrentStep(\"location\");\n          break;\n        case \"location\":\n          newUserData.contact.location = input;\n          setCurrentStep(\"linkedin\");\n          break;\n        case \"linkedin\":\n          if (input.trim()) {\n            newUserData.contact.linkedin = input;\n          }\n          setCurrentStep(\"summary\");\n          break;\n        case \"summary\":\n          newUserData.professionalSummary = input;\n          setCurrentStep(\"skills\");\n          break;\n        case \"skills\":\n          newUserData.skills = input.split(\",\").map(skill => skill.trim());\n          setCurrentStep(\"experience\");\n          break;\n        case \"experience\":\n          const [company, position, duration, responsibilities] = input.split(\"|\").map(item => item.trim());\n          newUserData.workExperience = [{\n            company,\n            position,\n            duration,\n            responsibilities\n          }];\n          setCurrentStep(\"education\");\n          break;\n        case \"education\":\n          const [degree, institution, year, gpa] = input.split(\"|\").map(item => item.trim());\n          newUserData.education = [{\n            degree,\n            institution,\n            year,\n            gpa: gpa || null\n          }];\n          setCurrentStep(\"certifications\");\n          break;\n        case \"certifications\":\n          if (input.trim()) {\n            const [name, organization, year] = input.split(\"|\").map(item => item.trim());\n            newUserData.certifications = [{\n              name,\n              organization,\n              year\n            }];\n          }\n          setCurrentStep(\"languages\");\n          break;\n        case \"languages\":\n          const [language, proficiency] = input.split(\"-\").map(item => item.trim());\n          newUserData.languages = [{\n            language,\n            proficiency\n          }];\n          setCurrentStep(\"projects\");\n          break;\n        case \"projects\":\n          if (input.trim()) {\n            const [name, description, technologies] = input.split(\"|\").map(item => item.trim());\n            newUserData.projects = [{\n              name,\n              description,\n              technologies\n            }];\n          }\n          setCurrentStep(\"awards\");\n          break;\n        case \"awards\":\n          if (input.trim()) {\n            const [name, organization, year] = input.split(\"|\").map(item => item.trim());\n            newUserData.awards = [{\n              name,\n              organization,\n              year\n            }];\n          }\n          setIsComplete(true);\n          break;\n        default:\n          console.log(\"Unknown step:\", currentStep);\n          break;\n      }\n      setUserData(newUserData);\n\n      // Simulate typing for bot response\n      const botResponse = await simulateTyping(data.nextQuestion);\n\n      // Add bot response\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: botResponse,\n        timestamp: new Date().toLocaleTimeString([], {\n          hour: \"2-digit\",\n          minute: \"2-digit\"\n        })\n      }]);\n\n      // Handle completion\n      if (data.isComplete) {\n        setIsComplete(true);\n        // Navigate to template selection page with user data\n        navigate(\"/select-template\", {\n          state: {\n            resumeData: newUserData\n          }\n        });\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      const errorMessage = await simulateTyping(\"Sorry, there was an error. Please try again.\");\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: errorMessage,\n        timestamp: new Date().toLocaleTimeString([], {\n          hour: \"2-digit\",\n          minute: \"2-digit\"\n        })\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Resume Builder AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-status\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-indicator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"AI Assistant Online\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-timestamp\",\n          children: message.timestamp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef,\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Type your response...\",\n        disabled: isComplete || isTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isComplete || isTyping || !input.trim(),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"riv3bG4zzYcKTs0MgXS95uuPzxI=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","type","text","timestamp","Date","toLocaleTimeString","hour","minute","input","setInput","currentStep","setCurrentStep","isComplete","setIsComplete","isTyping","setIsTyping","userData","setUserData","personalInfo","contact","professionalSummary","skills","workExperience","education","certifications","languages","projects","awards","messagesEndRef","inputRef","navigate","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","_inputRef$current","focus","handleInputChange","e","target","value","simulateTyping","response","Promise","resolve","setTimeout","Math","min","length","handleSubmit","preventDefault","trim","prev","fetch","method","headers","body","JSON","stringify","message","step","data","json","error","errorMessage","newUserData","fullName","title","email","phone","location","linkedin","split","map","skill","company","position","duration","responsibilities","item","degree","institution","year","gpa","name","organization","language","proficiency","description","technologies","console","log","botResponse","nextQuestion","state","resumeData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","ref","onSubmit","onChange","placeholder","disabled","viewBox","fill","stroke","strokeWidth","d","_c","$RefreshReg$"],"sources":["/Users/princevishal/Desktop/Chatbot/client/src/components/Chat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Chat.css\";\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([\n    {\n      type: \"bot\",\n      text: \"Hello! I'll help you create your professional resume. What is your full name?\",\n      timestamp: new Date().toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      }),\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(\"name\");\n  const [isComplete, setIsComplete] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [userData, setUserData] = useState({\n    personalInfo: {},\n    contact: {},\n    professionalSummary: \"\",\n    skills: [],\n    workExperience: [],\n    education: [],\n    certifications: [],\n    languages: [],\n    projects: [],\n    awards: [],\n  });\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const navigate = useNavigate();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Focus input field when component mounts and after typing finishes\n  useEffect(() => {\n    if (!isTyping && !isComplete) {\n      inputRef.current?.focus();\n    }\n  }, [isTyping, isComplete]);\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const simulateTyping = async (response) => {\n    setIsTyping(true);\n    // Simulate typing delay based on message length\n    await new Promise((resolve) =>\n      setTimeout(resolve, Math.min(1000, response.length * 20))\n    );\n    setIsTyping(false);\n    return response;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    const timestamp = new Date().toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n\n    // Add user message\n    setMessages((prev) => [...prev, { type: \"user\", text: input, timestamp }]);\n    setInput(\"\");\n\n    try {\n      const response = await fetch(\"http://localhost:3001/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          message: input,\n          step: currentStep,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.error) {\n        const errorMessage = await simulateTyping(\n          \"Sorry, something went wrong. Please try again.\"\n        );\n        setMessages((prev) => [\n          ...prev,\n          {\n            type: \"bot\",\n            text: errorMessage,\n            timestamp: new Date().toLocaleTimeString([], {\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            }),\n          },\n        ]);\n        return;\n      }\n\n      // Store user data\n      const newUserData = { ...userData };\n      switch (currentStep) {\n        case \"name\":\n          newUserData.personalInfo.fullName = input;\n          setCurrentStep(\"title\");\n          break;\n        case \"title\":\n          newUserData.personalInfo.title = input;\n          setCurrentStep(\"email\");\n          break;\n        case \"email\":\n          newUserData.contact.email = input;\n          setCurrentStep(\"phone\");\n          break;\n        case \"phone\":\n          newUserData.contact.phone = input;\n          setCurrentStep(\"location\");\n          break;\n        case \"location\":\n          newUserData.contact.location = input;\n          setCurrentStep(\"linkedin\");\n          break;\n        case \"linkedin\":\n          if (input.trim()) {\n            newUserData.contact.linkedin = input;\n          }\n          setCurrentStep(\"summary\");\n          break;\n        case \"summary\":\n          newUserData.professionalSummary = input;\n          setCurrentStep(\"skills\");\n          break;\n        case \"skills\":\n          newUserData.skills = input.split(\",\").map((skill) => skill.trim());\n          setCurrentStep(\"experience\");\n          break;\n        case \"experience\":\n          const [company, position, duration, responsibilities] = input\n            .split(\"|\")\n            .map((item) => item.trim());\n          newUserData.workExperience = [\n            {\n              company,\n              position,\n              duration,\n              responsibilities,\n            },\n          ];\n          setCurrentStep(\"education\");\n          break;\n        case \"education\":\n          const [degree, institution, year, gpa] = input\n            .split(\"|\")\n            .map((item) => item.trim());\n          newUserData.education = [\n            {\n              degree,\n              institution,\n              year,\n              gpa: gpa || null,\n            },\n          ];\n          setCurrentStep(\"certifications\");\n          break;\n        case \"certifications\":\n          if (input.trim()) {\n            const [name, organization, year] = input\n              .split(\"|\")\n              .map((item) => item.trim());\n            newUserData.certifications = [\n              {\n                name,\n                organization,\n                year,\n              },\n            ];\n          }\n          setCurrentStep(\"languages\");\n          break;\n        case \"languages\":\n          const [language, proficiency] = input\n            .split(\"-\")\n            .map((item) => item.trim());\n          newUserData.languages = [\n            {\n              language,\n              proficiency,\n            },\n          ];\n          setCurrentStep(\"projects\");\n          break;\n        case \"projects\":\n          if (input.trim()) {\n            const [name, description, technologies] = input\n              .split(\"|\")\n              .map((item) => item.trim());\n            newUserData.projects = [\n              {\n                name,\n                description,\n                technologies,\n              },\n            ];\n          }\n          setCurrentStep(\"awards\");\n          break;\n        case \"awards\":\n          if (input.trim()) {\n            const [name, organization, year] = input\n              .split(\"|\")\n              .map((item) => item.trim());\n            newUserData.awards = [\n              {\n                name,\n                organization,\n                year,\n              },\n            ];\n          }\n          setIsComplete(true);\n          break;\n        default:\n          console.log(\"Unknown step:\", currentStep);\n          break;\n      }\n      setUserData(newUserData);\n\n      // Simulate typing for bot response\n      const botResponse = await simulateTyping(data.nextQuestion);\n\n      // Add bot response\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"bot\",\n          text: botResponse,\n          timestamp: new Date().toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          }),\n        },\n      ]);\n\n      // Handle completion\n      if (data.isComplete) {\n        setIsComplete(true);\n        // Navigate to template selection page with user data\n        navigate(\"/select-template\", { state: { resumeData: newUserData } });\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      const errorMessage = await simulateTyping(\n        \"Sorry, there was an error. Please try again.\"\n      );\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"bot\",\n          text: errorMessage,\n          timestamp: new Date().toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          }),\n        },\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-header\">\n        <h1>Resume Builder AI</h1>\n        <div className=\"chat-status\">\n          <div className=\"status-indicator\"></div>\n          <span>AI Assistant Online</span>\n        </div>\n      </div>\n\n      <div className=\"messages\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.type}`}>\n            <div className=\"message-content\">{message.text}</div>\n            <div className=\"message-timestamp\">{message.timestamp}</div>\n          </div>\n        ))}\n        {isTyping && (\n          <div className=\"message bot\">\n            <div className=\"message-content\">\n              <div className=\"typing-indicator\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </div>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"input-form\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={input}\n          onChange={handleInputChange}\n          placeholder=\"Type your response...\"\n          disabled={isComplete || isTyping}\n        />\n        <button\n          type=\"submit\"\n          disabled={isComplete || isTyping || !input.trim()}\n        >\n          <span>Send</span>\n          <svg\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n          >\n            <path d=\"M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z\" />\n          </svg>\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}