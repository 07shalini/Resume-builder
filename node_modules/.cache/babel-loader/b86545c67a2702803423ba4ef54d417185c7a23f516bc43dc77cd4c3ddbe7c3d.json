{"ast":null,"code":"var _jsxFileName = \"/Users/princevishal/Desktop/Chatbot copy/client/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    type: \"bot\",\n    text: \"Hello! I'll help you create your professional resume. What is your full name?\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(\"name\");\n  const [isComplete, setIsComplete] = useState(false);\n  const [userData, setUserData] = useState({\n    personalInfo: {},\n    contact: {},\n    professionalSummary: \"\",\n    skills: [],\n    workExperience: [],\n    education: [],\n    certifications: [],\n    languages: [],\n    projects: [],\n    awards: []\n  });\n  const messagesEndRef = useRef(null);\n  const navigate = useNavigate();\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Add user message\n    setMessages(prev => [...prev, {\n      type: \"user\",\n      text: input\n    }]);\n    try {\n      const response = await fetch(\"http://localhost:3001/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input,\n          step: currentStep\n        })\n      });\n      const data = await response.json();\n      if (data.error) {\n        setMessages(prev => [...prev, {\n          type: \"bot\",\n          text: \"Sorry, something went wrong. Please try again.\"\n        }]);\n        return;\n      }\n\n      // Store user data\n      const newUserData = {\n        ...userData\n      };\n      switch (currentStep) {\n        case \"name\":\n          newUserData.personalInfo.fullName = input;\n          setCurrentStep(\"title\");\n          break;\n        case \"title\":\n          newUserData.personalInfo.title = input;\n          setCurrentStep(\"email\");\n          break;\n        case \"email\":\n          newUserData.contact.email = input;\n          setCurrentStep(\"phone\");\n          break;\n        case \"phone\":\n          newUserData.contact.phone = input;\n          setCurrentStep(\"location\");\n          break;\n        case \"location\":\n          newUserData.contact.location = input;\n          setCurrentStep(\"linkedin\");\n          break;\n        case \"linkedin\":\n          if (input.trim()) {\n            newUserData.contact.linkedin = input;\n          }\n          setCurrentStep(\"summary\");\n          break;\n        case \"summary\":\n          newUserData.professionalSummary = input;\n          setCurrentStep(\"skills\");\n          break;\n        case \"skills\":\n          newUserData.skills = input.split(\",\").map(skill => skill.trim());\n          setCurrentStep(\"experience\");\n          break;\n        case \"experience\":\n          if (input.toLowerCase() === \"done\") {\n            setCurrentStep(\"education\");\n          } else {\n            const [company, position, duration, responsibilities] = input.split(\"|\").map(item => item.trim());\n            newUserData.workExperience.push({\n              company,\n              position,\n              duration,\n              responsibilities\n            });\n          }\n          break;\n        case \"education\":\n          if (input.toLowerCase() === \"done\") {\n            setCurrentStep(\"certifications\");\n          } else {\n            const [degree, institution, year, gpa] = input.split(\"|\").map(item => item.trim());\n            newUserData.education.push({\n              degree,\n              institution,\n              year,\n              gpa: gpa || null\n            });\n          }\n          break;\n        case \"certifications\":\n          if (input.toLowerCase() === \"done\") {\n            setCurrentStep(\"languages\");\n          } else {\n            const [name, organization, year] = input.split(\"|\").map(item => item.trim());\n            newUserData.certifications.push({\n              name,\n              organization,\n              year\n            });\n          }\n          break;\n        case \"languages\":\n          if (input.toLowerCase() === \"done\") {\n            setCurrentStep(\"projects\");\n          } else {\n            const [language, proficiency] = input.split(\"-\").map(item => item.trim());\n            newUserData.languages.push({\n              language,\n              proficiency\n            });\n          }\n          break;\n        case \"projects\":\n          if (input.toLowerCase() === \"done\") {\n            setCurrentStep(\"awards\");\n          } else {\n            const [name, description, technologies] = input.split(\"|\").map(item => item.trim());\n            newUserData.projects.push({\n              name,\n              description,\n              technologies\n            });\n          }\n          break;\n        case \"awards\":\n          if (input.toLowerCase() === \"done\") {\n            setIsComplete(true);\n          } else {\n            const [name, organization, year] = input.split(\"|\").map(item => item.trim());\n            newUserData.awards.push({\n              name,\n              organization,\n              year\n            });\n          }\n          break;\n        default:\n          console.log(\"Unknown step:\", currentStep);\n          break;\n      }\n      setUserData(newUserData);\n\n      // Add bot response\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: data.nextQuestion\n      }]);\n\n      // Handle completion\n      if (data.isComplete) {\n        setIsComplete(true);\n        // Navigate to template selection page with user data\n        navigate(\"/select-template\", {\n          state: {\n            resumeData: newUserData\n          }\n        });\n      }\n      setInput(\"\");\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: \"Sorry, there was an error. Please try again.\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Type your response...\",\n        disabled: isComplete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isComplete,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"dYbhCrSMjpZiXa+MAkmvkEzIJ+A=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","type","text","input","setInput","currentStep","setCurrentStep","isComplete","setIsComplete","userData","setUserData","personalInfo","contact","professionalSummary","skills","workExperience","education","certifications","languages","projects","awards","messagesEndRef","navigate","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleInputChange","e","target","value","handleSubmit","preventDefault","trim","prev","response","fetch","method","headers","body","JSON","stringify","message","step","data","json","error","newUserData","fullName","title","email","phone","location","linkedin","split","map","skill","toLowerCase","company","position","duration","responsibilities","item","push","degree","institution","year","gpa","name","organization","language","proficiency","description","technologies","console","log","nextQuestion","state","resumeData","className","children","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSubmit","onChange","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/princevishal/Desktop/Chatbot copy/client/src/components/Chat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Chat.css\";\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([\n    {\n      type: \"bot\",\n      text: \"Hello! I'll help you create your professional resume. What is your full name?\",\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(\"name\");\n  const [isComplete, setIsComplete] = useState(false);\n  const [userData, setUserData] = useState({\n    personalInfo: {},\n    contact: {},\n    professionalSummary: \"\",\n    skills: [],\n    workExperience: [],\n    education: [],\n    certifications: [],\n    languages: [],\n    projects: [],\n    awards: [],\n  });\n  const messagesEndRef = useRef(null);\n  const navigate = useNavigate();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Add user message\n    setMessages((prev) => [...prev, { type: \"user\", text: input }]);\n\n    try {\n      const response = await fetch(\"http://localhost:3001/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          message: input,\n          step: currentStep,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.error) {\n        setMessages((prev) => [\n          ...prev,\n          {\n            type: \"bot\",\n            text: \"Sorry, something went wrong. Please try again.\",\n          },\n        ]);\n        return;\n      }\n\n      // Store user data\n      const newUserData = { ...userData };\n      switch (currentStep) {\n        case \"name\":\n          newUserData.personalInfo.fullName = input;\n          setCurrentStep(\"title\");\n          break;\n        case \"title\":\n          newUserData.personalInfo.title = input;\n          setCurrentStep(\"email\");\n          break;\n        case \"email\":\n          newUserData.contact.email = input;\n          setCurrentStep(\"phone\");\n          break;\n        case \"phone\":\n          newUserData.contact.phone = input;\n          setCurrentStep(\"location\");\n          break;\n        case \"location\":\n          newUserData.contact.location = input;\n          setCurrentStep(\"linkedin\");\n          break;\n        case \"linkedin\":\n          if (input.trim()) {\n            newUserData.contact.linkedin = input;\n          }\n          setCurrentStep(\"summary\");\n          break;\n        case \"summary\":\n          newUserData.professionalSummary = input;\n          setCurrentStep(\"skills\");\n          break;\n        case \"skills\":\n          newUserData.skills = input.split(\",\").map((skill) => skill.trim());\n          setCurrentStep(\"experience\");\n          break;\n        case \"experience\":\n          if (input.toLowerCase() === \"done\") {\n            setCurrentStep(\"education\");\n          } else {\n            const [company, position, duration, responsibilities] = input\n              .split(\"|\")\n              .map((item) => item.trim());\n            newUserData.workExperience.push({\n              company,\n              position,\n              duration,\n              responsibilities,\n            });\n          }\n          break;\n        case \"education\":\n          if (input.toLowerCase() === \"done\") {\n            setCurrentStep(\"certifications\");\n          } else {\n            const [degree, institution, year, gpa] = input\n              .split(\"|\")\n              .map((item) => item.trim());\n            newUserData.education.push({\n              degree,\n              institution,\n              year,\n              gpa: gpa || null,\n            });\n          }\n          break;\n        case \"certifications\":\n          if (input.toLowerCase() === \"done\") {\n            setCurrentStep(\"languages\");\n          } else {\n            const [name, organization, year] = input\n              .split(\"|\")\n              .map((item) => item.trim());\n            newUserData.certifications.push({\n              name,\n              organization,\n              year,\n            });\n          }\n          break;\n        case \"languages\":\n          if (input.toLowerCase() === \"done\") {\n            setCurrentStep(\"projects\");\n          } else {\n            const [language, proficiency] = input\n              .split(\"-\")\n              .map((item) => item.trim());\n            newUserData.languages.push({\n              language,\n              proficiency,\n            });\n          }\n          break;\n        case \"projects\":\n          if (input.toLowerCase() === \"done\") {\n            setCurrentStep(\"awards\");\n          } else {\n            const [name, description, technologies] = input\n              .split(\"|\")\n              .map((item) => item.trim());\n            newUserData.projects.push({\n              name,\n              description,\n              technologies,\n            });\n          }\n          break;\n        case \"awards\":\n          if (input.toLowerCase() === \"done\") {\n            setIsComplete(true);\n          } else {\n            const [name, organization, year] = input\n              .split(\"|\")\n              .map((item) => item.trim());\n            newUserData.awards.push({\n              name,\n              organization,\n              year,\n            });\n          }\n          break;\n        default:\n          console.log(\"Unknown step:\", currentStep);\n          break;\n      }\n      setUserData(newUserData);\n\n      // Add bot response\n      setMessages((prev) => [\n        ...prev,\n        { type: \"bot\", text: data.nextQuestion },\n      ]);\n\n      // Handle completion\n      if (data.isComplete) {\n        setIsComplete(true);\n        // Navigate to template selection page with user data\n        navigate(\"/select-template\", { state: { resumeData: newUserData } });\n      }\n\n      setInput(\"\");\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"bot\",\n          text: \"Sorry, there was an error. Please try again.\",\n        },\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"messages\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.type}`}>\n            {message.text}\n          </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      <form onSubmit={handleSubmit} className=\"input-form\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={handleInputChange}\n          placeholder=\"Type your response...\"\n          disabled={isComplete}\n        />\n        <button type=\"submit\" disabled={isComplete}>\n          Send\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}