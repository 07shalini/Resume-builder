{"ast":null,"code":"var _jsxFileName = \"/Users/princevishal/Desktop/Chatbot/client/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    type: \"bot\",\n    text: \"Hello! I'll help you create your resume. Let's start with your personal information. What is your full name?\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(\"fullName\");\n  const [isComplete, setIsComplete] = useState(false);\n  const [userData, setUserData] = useState({\n    fullName: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    linkedin: \"\",\n    github: \"\",\n    summary: \"\",\n    skills: [],\n    experience: [],\n    education: [],\n    projects: [],\n    certifications: [],\n    languages: [],\n    interests: []\n  });\n  const messagesEndRef = useRef(null);\n  const navigate = useNavigate();\n  const steps = {\n    fullName: {\n      next: \"email\",\n      question: \"What is your email address?\"\n    },\n    email: {\n      next: \"phone\",\n      question: \"What is your phone number?\"\n    },\n    phone: {\n      next: \"address\",\n      question: \"What is your address?\"\n    },\n    address: {\n      next: \"linkedin\",\n      question: \"What is your LinkedIn profile URL?\"\n    },\n    linkedin: {\n      next: \"github\",\n      question: \"What is your GitHub profile URL?\"\n    },\n    github: {\n      next: \"summary\",\n      question: \"Please provide a brief summary (2-3 sentences) about your skills, experience, and career goals.\"\n    },\n    summary: {\n      next: \"skills\",\n      question: \"List your skills (comma-separated):\"\n    },\n    skills: {\n      next: \"experience\",\n      question: \"Let's add your work experience. What is your current/most recent job title?\"\n    },\n    experience: {\n      next: \"education\",\n      question: \"Let's add your education. What is your highest degree?\"\n    },\n    education: {\n      next: \"projects\",\n      question: \"Let's add your projects. What is the title of your most significant project?\"\n    },\n    projects: {\n      next: \"certifications\",\n      question: \"Let's add your certifications. What is the name of your most recent certification?\"\n    },\n    certifications: {\n      next: \"languages\",\n      question: \"What languages do you speak? (e.g., English: Fluent, Spanish: Basic)\"\n    },\n    languages: {\n      next: \"interests\",\n      question: \"What are your interests? (comma-separated)\"\n    },\n    interests: {\n      next: \"complete\",\n      question: \"Great! Your resume information is complete.\"\n    }\n  };\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Add user message\n    setMessages(prev => [...prev, {\n      type: \"user\",\n      text: input\n    }]);\n\n    // Store user data based on current step\n    const newUserData = {\n      ...userData\n    };\n    switch (currentStep) {\n      case \"fullName\":\n        newUserData.fullName = input;\n        break;\n      case \"email\":\n        newUserData.email = input;\n        break;\n      case \"phone\":\n        newUserData.phone = input;\n        break;\n      case \"address\":\n        newUserData.address = input;\n        break;\n      case \"linkedin\":\n        newUserData.linkedin = input;\n        break;\n      case \"github\":\n        newUserData.github = input;\n        break;\n      case \"summary\":\n        newUserData.summary = input;\n        break;\n      case \"skills\":\n        newUserData.skills = input.split(\",\").map(skill => skill.trim());\n        break;\n      case \"experience\":\n        // Handle experience as an array of objects\n        if (!newUserData.experience) newUserData.experience = [];\n        newUserData.experience.push({\n          jobTitle: input,\n          company: \"\",\n          location: \"\",\n          startDate: \"\",\n          endDate: \"Present\",\n          description: \"\"\n        });\n        break;\n      case \"education\":\n        // Handle education as an array of objects\n        if (!newUserData.education) newUserData.education = [];\n        newUserData.education.push({\n          degree: input,\n          school: \"\",\n          location: \"\",\n          startYear: \"\",\n          endYear: \"\",\n          percentageOrCGPA: \"\"\n        });\n        break;\n      case \"projects\":\n        // Handle projects as an array of objects\n        if (!newUserData.projects) newUserData.projects = [];\n        newUserData.projects.push({\n          title: input,\n          techStack: [],\n          description: \"\",\n          link: \"\"\n        });\n        break;\n      case \"certifications\":\n        // Handle certifications as an array of objects\n        if (!newUserData.certifications) newUserData.certifications = [];\n        newUserData.certifications.push({\n          name: input,\n          provider: \"\",\n          date: \"\"\n        });\n        break;\n      case \"languages\":\n        // Handle languages as an array of objects\n        const languageEntries = input.split(\",\").map(entry => {\n          const [language, proficiency] = entry.split(\":\").map(s => s.trim());\n          return {\n            language,\n            proficiency\n          };\n        });\n        newUserData.languages = languageEntries;\n        break;\n      case \"interests\":\n        newUserData.interests = input.split(\",\").map(interest => interest.trim());\n        break;\n      default:\n        console.log(\"Unknown step:\", currentStep);\n    }\n    setUserData(newUserData);\n\n    // Add bot response\n    const nextStep = steps[currentStep].next;\n    if (nextStep === \"complete\") {\n      setIsComplete(true);\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: \"Your resume information is complete! Click the button below to generate your resume.\"\n      }]);\n    } else {\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: steps[nextStep].question\n      }]);\n      setCurrentStep(nextStep);\n    }\n    setInput(\"\");\n  };\n  const handleGenerateResume = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3001/api/generate-resume\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(userData)\n      });\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = `${userData.fullName.replace(/\\s+/g, \"_\")}_Resume.pdf`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      } else {\n        setMessages(prev => [...prev, {\n          type: \"bot\",\n          text: \"Sorry, there was an error generating your resume.\"\n        }]);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: \"Sorry, there was an error generating your resume.\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), isComplete ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"generate-button\",\n        onClick: handleGenerateResume,\n        children: \"Generate Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: handleInputChange,\n          placeholder: \"Type your answer...\",\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"fd4VadU39o9MK9SC+Zm1kK6NBmk=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","type","text","input","setInput","currentStep","setCurrentStep","isComplete","setIsComplete","userData","setUserData","fullName","email","phone","address","linkedin","github","summary","skills","experience","education","projects","certifications","languages","interests","messagesEndRef","navigate","steps","next","question","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleInputChange","e","target","value","handleSubmit","preventDefault","trim","prev","newUserData","split","map","skill","push","jobTitle","company","location","startDate","endDate","description","degree","school","startYear","endYear","percentageOrCGPA","title","techStack","link","name","provider","date","languageEntries","entry","language","proficiency","s","interest","console","log","nextStep","handleGenerateResume","response","fetch","method","headers","body","JSON","stringify","ok","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","replace","appendChild","click","revokeObjectURL","removeChild","error","className","children","message","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","onSubmit","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/princevishal/Desktop/Chatbot/client/src/components/Chat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Chat.css\";\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([\n    {\n      type: \"bot\",\n      text: \"Hello! I'll help you create your resume. Let's start with your personal information. What is your full name?\",\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(\"fullName\");\n  const [isComplete, setIsComplete] = useState(false);\n  const [userData, setUserData] = useState({\n    fullName: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    linkedin: \"\",\n    github: \"\",\n    summary: \"\",\n    skills: [],\n    experience: [],\n    education: [],\n    projects: [],\n    certifications: [],\n    languages: [],\n    interests: []\n  });\n  const messagesEndRef = useRef(null);\n  const navigate = useNavigate();\n\n  const steps = {\n    fullName: {\n      next: \"email\",\n      question: \"What is your email address?\",\n    },\n    email: {\n      next: \"phone\",\n      question: \"What is your phone number?\",\n    },\n    phone: {\n      next: \"address\",\n      question: \"What is your address?\",\n    },\n    address: {\n      next: \"linkedin\",\n      question: \"What is your LinkedIn profile URL?\",\n    },\n    linkedin: {\n      next: \"github\",\n      question: \"What is your GitHub profile URL?\",\n    },\n    github: {\n      next: \"summary\",\n      question: \"Please provide a brief summary (2-3 sentences) about your skills, experience, and career goals.\",\n    },\n    summary: {\n      next: \"skills\",\n      question: \"List your skills (comma-separated):\",\n    },\n    skills: {\n      next: \"experience\",\n      question: \"Let's add your work experience. What is your current/most recent job title?\",\n    },\n    experience: {\n      next: \"education\",\n      question: \"Let's add your education. What is your highest degree?\",\n    },\n    education: {\n      next: \"projects\",\n      question: \"Let's add your projects. What is the title of your most significant project?\",\n    },\n    projects: {\n      next: \"certifications\",\n      question: \"Let's add your certifications. What is the name of your most recent certification?\",\n    },\n    certifications: {\n      next: \"languages\",\n      question: \"What languages do you speak? (e.g., English: Fluent, Spanish: Basic)\",\n    },\n    languages: {\n      next: \"interests\",\n      question: \"What are your interests? (comma-separated)\",\n    },\n    interests: {\n      next: \"complete\",\n      question: \"Great! Your resume information is complete.\",\n    },\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Add user message\n    setMessages((prev) => [...prev, { type: \"user\", text: input }]);\n\n    // Store user data based on current step\n    const newUserData = { ...userData };\n    switch (currentStep) {\n      case \"fullName\":\n        newUserData.fullName = input;\n        break;\n      case \"email\":\n        newUserData.email = input;\n        break;\n      case \"phone\":\n        newUserData.phone = input;\n        break;\n      case \"address\":\n        newUserData.address = input;\n        break;\n      case \"linkedin\":\n        newUserData.linkedin = input;\n        break;\n      case \"github\":\n        newUserData.github = input;\n        break;\n      case \"summary\":\n        newUserData.summary = input;\n        break;\n      case \"skills\":\n        newUserData.skills = input.split(\",\").map((skill) => skill.trim());\n        break;\n      case \"experience\":\n        // Handle experience as an array of objects\n        if (!newUserData.experience) newUserData.experience = [];\n        newUserData.experience.push({\n          jobTitle: input,\n          company: \"\",\n          location: \"\",\n          startDate: \"\",\n          endDate: \"Present\",\n          description: \"\"\n        });\n        break;\n      case \"education\":\n        // Handle education as an array of objects\n        if (!newUserData.education) newUserData.education = [];\n        newUserData.education.push({\n          degree: input,\n          school: \"\",\n          location: \"\",\n          startYear: \"\",\n          endYear: \"\",\n          percentageOrCGPA: \"\"\n        });\n        break;\n      case \"projects\":\n        // Handle projects as an array of objects\n        if (!newUserData.projects) newUserData.projects = [];\n        newUserData.projects.push({\n          title: input,\n          techStack: [],\n          description: \"\",\n          link: \"\"\n        });\n        break;\n      case \"certifications\":\n        // Handle certifications as an array of objects\n        if (!newUserData.certifications) newUserData.certifications = [];\n        newUserData.certifications.push({\n          name: input,\n          provider: \"\",\n          date: \"\"\n        });\n        break;\n      case \"languages\":\n        // Handle languages as an array of objects\n        const languageEntries = input.split(\",\").map(entry => {\n          const [language, proficiency] = entry.split(\":\").map(s => s.trim());\n          return { language, proficiency };\n        });\n        newUserData.languages = languageEntries;\n        break;\n      case \"interests\":\n        newUserData.interests = input.split(\",\").map((interest) => interest.trim());\n        break;\n      default:\n        console.log(\"Unknown step:\", currentStep);\n    }\n    setUserData(newUserData);\n\n    // Add bot response\n    const nextStep = steps[currentStep].next;\n    if (nextStep === \"complete\") {\n      setIsComplete(true);\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"bot\",\n          text: \"Your resume information is complete! Click the button below to generate your resume.\",\n        },\n      ]);\n    } else {\n      setMessages((prev) => [\n        ...prev,\n        { type: \"bot\", text: steps[nextStep].question },\n      ]);\n      setCurrentStep(nextStep);\n    }\n\n    setInput(\"\");\n  };\n\n  const handleGenerateResume = async () => {\n    try {\n      const response = await fetch(\n        \"http://localhost:3001/api/generate-resume\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(userData),\n        }\n      );\n\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = `${userData.fullName.replace(/\\s+/g, \"_\")}_Resume.pdf`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      } else {\n        setMessages((prev) => [\n          ...prev,\n          {\n            type: \"bot\",\n            text: \"Sorry, there was an error generating your resume.\",\n          },\n        ]);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"bot\",\n          text: \"Sorry, there was an error generating your resume.\",\n        },\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"messages\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.type}`}>\n            <div className=\"message-content\">{message.text}</div>\n          </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      {isComplete ? (\n        <div className=\"button-container\">\n          <button className=\"generate-button\" onClick={handleGenerateResume}>\n            Generate Resume\n          </button>\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit} className=\"input-form\">\n          <div className=\"input-container\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={handleInputChange}\n              placeholder=\"Type your answer...\"\n              className=\"chat-input\"\n            />\n          </div>\n          <button type=\"submit\" className=\"send-button\">\n            Send\n          </button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}